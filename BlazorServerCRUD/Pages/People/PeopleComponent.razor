@page "/Data/People"
@using DataAccessLibrary.DAL.Models;
@using Models;
@using BusinessAccessLibrary.BAL.Interface
@using RazorClassLibrary;

@inject IPeopleData _peopleData;
@inject IJSRuntime jSRuntime;



<h1>People Page</h1>

@*<div id="ResponseMessage" class="col-10 alert alert-info">

    </div>*@
<Messages ResponseMessageIsVisble="ResponseMessageIsVisble" Result="Result">
    <span>Person: </span>  @RecordName
</Messages>
<EditForm Model="@Person" OnValidSubmit="@InsertPerson">

    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="add-person-container">
        <div class="row form-group">
            <div class="col-md-2">
                <label>First Name</label>
            </div>
            <div class="col-4">

                <input @ref="FirstNameText" type="text" @bind="Person.FirstName" id="FirstName" class="form-control" />
            </div>
        </div>
        <div class="row form-group">
            <div class="col-md-2">
                <label>Last Name</label>
            </div>
            <div class="col-4">
                <InputText id="LastName" @bind-Value="Person.LastName" class="form-control" />
            </div>
        </div>
        <div class="row form-group">
            <div class="col-md-2">
                <label>Email</label>
            </div>
            <div class="col-4">
                <InputText id="Email" @bind-Value="@Person.Email" class="form-control" />
            </div>
        </div>

        <div class="row form-group">
            <div class="col-md-2">
                <label>City</label>
            </div>
            <div class="col-4">
                @*<InputSelect @bind-Value="Person.City" class="form-control">

                        @foreach (var city in Cities)
                        {
                            <option value="@city.Id"> @city.Name</option>
                        }
                    </InputSelect>*@
                <SelectCity></SelectCity>
            </div>
        </div>

        <div class="row form-group">
            <div class="col-10">
                <button type="submit" class="btn btn-primary">Save</button>
            </div>
        </div>

    </div>
</EditForm>

@if (people is null)
{
    <p><em>Loading...</em> </p>
}
else
{

    <MatTable Items="@people.ToArray()" class="mat-elevation-z5" Striped="true">

        <MatTableHeader>
            <th>First Name</th>
            <th>Last Name</th>
            <th>Email</th>
            <th>City</th>
        </MatTableHeader>


        <MatTableRow>

            <td>@context.FirstName</td>
            <td>@context.LastName</td>
            <td>@context.Email</td>
            <td>@context.City.Name</td>
        </MatTableRow>






    </MatTable>
    @*<table class="table table-striped">
            <thead>
                <tr>
                    <th>First Name</th>
                    <th>Last Name</th>
                    <th>Email</th>
                    <th>City</th>


                </tr>
            </thead>
            <tbody>
                @foreach (var person in people)
                {
                    <tr>
                        <td>@person.FirstName</td>
                        <td>@person.LastName</td>
                        <td>@person.Email</td>
                        <td>@person.City.Name</td>
                    </tr>
                }


            </tbody>
        </table>*@
}

@code {

    private List<PersonModel> people;

    //public DisplayPersonModel Person { get; set; }

    public List<CityModel> Cities = new List<CityModel>();

    private DisplayPersonModel Person = new DisplayPersonModel();

    ElementReference FirstNameText;

    public bool ResponseMessageIsVisble { get; set; } = false;
    public string RecordName { get; set; }
    public bool Result { get; set; }



    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{

    //    if (firstRender && Cities.Count == 0)
    //    {
    //        Cities = await _peopleData.GetCities();
    //        StateHasChanged();
    //    }
    //}



    protected override async Task OnInitializedAsync()
    {
        people = await _peopleData.GetPeople();
    }


    private async Task InsertPerson()
    {

        PersonModel p = new PersonModel
        {
            FirstName = Person.FirstName,
            LastName = Person.LastName,
            Email = Person.Email,
            City = new CityModel()
            {
                Id = Convert.ToInt32(Person.City),
                Name = Cities.Where(x => x.Id == Convert.ToInt32(Person.City)).Select(x => x.Name).FirstOrDefault()
            }
        };
        int retVal = await _peopleData.InsertPerson(p);
        ResponseMessageIsVisble = true;
        if (retVal < 1)
        {
            Result = false;

            return;
        }

        people.Add(p);

        //RecordName = p.FirstName +p.LastName;
        RecordName = p.FirstName + " " + p.LastName;
        Result = true;
        // people = await _peopleData.GetPeople();
        Person = new DisplayPersonModel();
        // await jSRuntime.InvokeVoidAsync("SaveMessage", p.FirstName, p.LastName);
        await jSRuntime.InvokeVoidAsync("SetFOcusOnElement", FirstNameText);

    }

}


